#!/usr/bin/env python3
"""
import sys
sys.path.append('/home/linux/Documents/chatbot-diya')

Start Flask app and test the integration
"""
import subprocess
import time
import requests
import json

def start_flask_app():
    """Start the Flask app in background"""
    print("🚀 Starting Flask app...")
    
    # Start Flask app
    process = subprocess.Popen(
        ['python', 'flask_app.py'],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        cwd='/home/linux/Documents/chatbot-diya'
    )
    
    # Wait for app to start
    time.sleep(3)
    
    # Test if app is running
    try:
        response = requests.get('http://localhost:5000', timeout=5)
        if response.status_code == 200:
            print("✅ Flask app started successfully")
            return process
        else:
            print(f"❌ Flask app returned status {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"❌ Failed to connect to Flask app: {e}")
    
    return None

def test_api_endpoints():
    """Test the critical API endpoints"""
    print("\n🧪 Testing API endpoints...")
    
    # Test the critical site visit query
    test_data = {
        "question": "show me the site visit details of any one complaint id",
        "session_id": "test_session"
    }
    
    try:
        response = requests.post(
            'http://localhost:5000/api/query',
            json=test_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"✅ API responded successfully")
            
            if result.get('sql'):
                sql_text = result['sql'].lower()
                print(f"📝 Generated SQL: {result['sql'][:200]}...")
                
                if 'crm_site_visit' in sql_text:
                    print("✅ CRITICAL SUCCESS: API uses CRM site visit table!")
                    return True
                else:
                    print("❌ ISSUE: API does not use CRM site visit table")
                    print(f"   Full SQL: {result['sql']}")
            else:
                print("❌ No SQL generated by API")
                
        else:
            print(f"❌ API error: {response.status_code}")
            print(f"   Response: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"❌ API request failed: {e}")
    
    return False

def main():
    """Main test function"""
    print("🔧 Integration Test with Live Flask App")
    print("=" * 50)
    
    # Start Flask app
    process = start_flask_app()
    
    if process:
        try:
            # Test API endpoints
            success = test_api_endpoints()
            
            if success:
                print("\n🎉 INTEGRATION TEST PASSED!")
                print("✅ Enhanced table mapping is working correctly")
                print("✅ Site visit queries use the correct CRM table")
            else:
                print("\n⚠️  INTEGRATION TEST ISSUES DETECTED")
                print("❌ Review the table mapping logic")
            
        finally:
            # Clean up
            print("\n🧹 Cleaning up...")
            process.terminate()
            process.wait()
            print("✅ Flask app stopped")
    else:
        print("❌ Could not start Flask app for testing")

if __name__ == "__main__":
    main()
